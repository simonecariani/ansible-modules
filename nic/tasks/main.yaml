---

# Nic role
# Creating and amending NIC which covers connection and relevant device. This
# refers to IPV4 only.
#
# Actions:
# - flushing connection if 'nic_flush' variable is defined
# - shutting down connection if 'nic_shutdown' variable is defined
# - bringing up connection if 'nic_up' variable is defined
# - creating ethernet connection if 'nic_type' variable equals 'ethernet'
# - creating bond connection if 'nic_type' variable equals 'bond'
# - creating bond-slave connection if 'nic_type' variable equals 'bond-slave'
# - defining IP if 'nic_ip' variable is defined
# - defining gateway if 'nic_gw' variable is defined
# - defining DNS if 'nic_dns1' and 'nic_dns2' are defined
# - defining 802-3-ethernet.mac-address if 'nic_mac' variable is defined
# - restarting connection if 'nic_refresh' variable is defined
#
# Compatibility version: 2.3
#
# Variables:
# Mandatory
# - nic_conname (connection name)
#
# Dependant
# - nic_type (connection type)
# - nic_ifname (device name if nic_type is specified)
# - nic_mode (bond mode if nic_type equals 'bond')
# - nic_master (master bond if nic_type equals 'bond-slave')
#
# Optional
# - nic_flush (to remove connection)
# - nic_shutdown (to shutdown connection)
# - nic_up (to bring up connection)
# - nic_ip (to create IP, it must be CIDR notation if nic_type is specified)
# - nic_gw (to add gateway if nic_type is specified)
# - nic_dns1 and nic_dns2 (to add DNSes if nic_type is specified)
# - nic_mac (to add MAC address)
# - nic_refresh (to restart connection)

- name: Flushing existing connection {{ nic_conname }}
  command: /usr/bin/nmcli c del '{{ nic_conname }}'
  when: nic_flush is defined and nic_conname is defined and nic_flush

- name: Shutting down connection {{ nic_conname }}
  command: /usr/bin/nmcli c down '{{ nic_conname }}'
  when: nic_shutdown is defined and nic_conname is defined and nic_shutdown

- name: Bringing up connection {{ nic_conname }}
  command: /usr/bin/nmcli c up '{{ nic_conname }}'
  when: nic_up is defined and nic_conname is defined and nic_up

- name: Creating ethernet connection {{ nic_conname }}
  nmcli:
    type: ethernet
    conn_name: "{{ nic_conname }}"
    ifname: "{{ nic_ifname }}"
    autoconnect: yes
    state: present
  when: nic_conname is defined and nic_ifname is defined and nic_type == 'ethernet'

- name: Creating bond connection {{ nic_conname }}
  nmcli:
    type: bond
    conn_name: "{{ nic_conname }}"
    ifname: "{{ nic_ifname }}"
    mode: "{{ nic_mode }}"
    autoconnect: yes
    state: present
  when: nic_conname is defined and nic_ifname is defined and nic_mode is defined and nic_type == 'bond'

- name: Creating bond slave connection {{ nic_conname }}
  nmcli:
    type: bond-slave
    conn_name: "{{ nic_conname }}"
    ifname: "{{ nic_ifname }}"
    master: "{{ nic_master }}"
    autoconnect: yes
    state: present
  when: nic_conname is defined and nic_ifname is defined and nic_master is defined and nic_type == 'bond-slave'

- name: Defining IP for connection {{ nic_conname }}
  nmcli:
    type: "{{ nic_type }}"
    conn_name: "{{ nic_conname }}"
    ip4: "{{ nic_ip }}"
    state: present
  when: nic_ip is defined and nic_type is defined

- name: Setting connection method for connection {{ nic_conname }}
  command: /usr/bin/nmcli c modify '{{ nic_conname }}' ipv4.method manual
  when: nic_ip is defined

- name: Defining gateway for connection {{ nic_conname }}
  nmcli:
    type: "{{ nic_type }}"
    conn_name: "{{ nic_conname }}"
    gw4: "{{ nic_gw }}"
    state: present
  when: nic_gw is defined and nic_type is defined

- name: Defining DNS for connection {{ nic_conname }}
  nmcli:
    type: "{{ nic_type }}"
    conn_name: "{{ nic_conname }}"
    dns4:
      - "{{ nic_dns1 }}"
      - "{{ nic_dns2 }}"
    state: present
  when: nic_dns1 is defined and nic_dns2 is defined and nic_type is defined

- name: Defining MAC address for connection {{ nic_conname }}
  command: /usr/bin/nmcli c modify '{{ nic_conname }}' 802-3-ethernet.mac-address '{{ nic_mac }}'
  when: nic_mac is defined

- name: Looking at the connection state
  command: /usr/bin/nmcli -f CONNECTION d | grep ^{{ nic_conname }}
  register: isup
  no_log: True
  ignore_errors: True
  when: nic_refresh is defined and nic_refresh

- name: Shutting down connection {{ nic_conname }}
  command: /usr/bin/nmcli c down '{{ nic_conname }}'
  when: nic_refresh is defined and nic_refresh and isup|succeeded

- name: Restarting connection {{ nic_conname }}
  command: /usr/bin/nmcli c up '{{ nic_conname }}'
  when: nic_refresh is defined and nic_refresh and isup|failed
